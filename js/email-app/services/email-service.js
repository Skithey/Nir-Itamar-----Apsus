import { utilsService } from '../../utils/utils-service.js';

export const emailsService = {
    getEmails,
    getById,
    removeEmail,
    addEmail,
    changeIsRead,
    changeEmailImp
}
const EMAIL_INFO = 'emails'
var recivedHour = new Date().getHours();
var recivedMin = new Date().getMinutes();
var recivedTime = recivedHour + ':' + recivedMin
var recivedDay = new Date().getDate()
var recivedMonth = new Date().getMonth() + 1
var recivedYear = new Date().getFullYear()
var recivedFullDate = `${recivedTime} (${recivedDay}/${recivedMonth}/${recivedYear})`

var gEmails = (() => {
    var emails = utilsService.loadFromStorage(EMAIL_INFO);
    if (!emails) {
        emails = createDefaultEmails();
        utilsService.saveToStorage(EMAIL_INFO, emails);
    }
    return emails;
})();

function createDefaultEmails() {
    return [
        { id: utilsService.getRandomId(), from: 'Itamar111@gmail.com', subject: 'Zoom', desc: 'Zoom Video Communications, Inc. (Zoom) is an American communications technology company headquartered in San Jose, California. It provides videotelephony and online chat services through a cloud-based peer-to-peer software platform and is used for teleconferencing, telecommuting, distance education, and social relations', isRead: false, isImportant: true, sentAt: recivedFullDate },
        { id: utilsService.getRandomId(), from: 'Nir882@gmail.com', subject: 'Java Script', desc: 'JavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.\
        JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers., isRead: true, isImportant: false, sentAt: recivedFullDate ', isRead: false, isImportant: true, sentAt: recivedFullDate },
        { id: utilsService.getRandomId(), from: 'Puki', subject: 'Muki\n story ', desc: 'The muki (Quechua for asphyxia, also for a goblin who lives in caves,[1] also spelled muqui or mooqui) is a goblin-like creature in the mythology of the Central Andes in Bolivia, Peru, Ecuador and Colombia. He is known to be a miner and his existence is constrained to underground spaces: The muki lives inside the mines.\
        Despite the distance and the isolation of the mining camps, the belief and the description of the muki is consistent throughout Peru, from the highlands of Puno in the south to Cajamarca in the north.', isRead: false, isImportant: false, sentAt: recivedFullDate },
    ]
}

function getEmails() {
    if (!localStorage.emails || !localStorage.emails.length) {
        utilsService.saveToStorage(EMAIL_INFO, gEmails);
        return Promise.resolve(gEmails)
    } else {
        const emails = utilsService.loadFromStorage(EMAIL_INFO);
        return Promise.resolve(emails)
    }
}

function getById(emailId) {
    // console.log(emailId);
    return getEmails()
        .then(emails => {
            return emails.find(email => {
                return email.id === emailId
            })
        })
}

// function changeIsRead(emailId) {
//     getById(emailId)
//         .then(email => {

//         })

// }
function changeEmailImp(emailId) {
    const emailToChangeIdx = gEmails.findIndex(email => email.id === emailId);
    gEmails[emailToChangeIdx].isImportant = !gEmails[emailToChangeIdx].isImportant
    utilsService.saveToStorage(EMAIL_INFO, gEmails)
    return emailToChangeIdx
}

function changeIsRead(emailId) {
    const emailToChangeIdx = gEmails.findIndex(email => email.id === emailId);
    gEmails[emailToChangeIdx].isRead = !gEmails[emailToChangeIdx].isRead
    utilsService.saveToStorage(EMAIL_INFO, gEmails)
    return emailToChangeIdx
}

function removeEmail(emailId) {
    const emailToDeleteIdx = gEmails.findIndex(email => email.id === emailId);
    gEmails.splice(emailToDeleteIdx, 1);
    // console.log(gEmails)
    utilsService.saveToStorage(EMAIL_INFO, gEmails)
    return Promise.resolve(gEmails)
}


function addEmail(to, subject, desc, from) {
    const email = {
        id: utilsService.getRandomId(),
        from,
        subject,
        to,
        desc,
        isImportant: false,
        isRead: true,
        sentAt: recivedFullDate
    }
    gEmails.push(email)
    utilsService.saveToStorage(EMAIL_INFO, gEmails)
    return Promise.resolve(email)
}